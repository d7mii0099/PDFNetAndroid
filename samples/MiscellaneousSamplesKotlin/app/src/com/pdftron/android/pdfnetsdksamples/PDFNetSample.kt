//---------------------------------------------------------------------------------------
// Copyright (c) 2001-2019 by PDFTron Systems Inc. All Rights Reserved.
// Consult legal.txt regarding legal and license information.
//---------------------------------------------------------------------------------------
package com.pdftron.android.pdfnetsdksamples

import java.util.concurrent.CopyOnWriteArrayList

abstract class PDFNetSample {
    /*
     * Title used to identify the sample in the detail fragment.
     */
    var title = "{Sample Title}"
        protected set

    /*
     * Sample description shown in the detail fragment.
     */
    var description = "{Sample Description}"
        protected set

    /*
     * Stores the files that were generated by the sample.
     */
    private var mFileList: CopyOnWriteArrayList<String>

    /*
     * Indicates that this sample is enabled so it can be executed.
     */
    protected var isEnabled: Boolean
        private set

    open fun run(outputListener: OutputListener?) {
        mFileList.clear()
    }

    open fun runOnBackground() {
        mFileList.clear()
    }

    protected fun setTitle(resId: Int) {
        title = MiscellaneousSamplesApplication.instance!!.getString(resId)
    }

    protected fun setDescription(resId: Int) {
        description = MiscellaneousSamplesApplication.instance!!.getString(resId)
    }

    val files: ArrayList<String>
        get() = ArrayList(mFileList)

    protected fun addToFileList(fileName: String) {
        mFileList.add(fileName)
    }

    protected fun printHeader(outputListener: OutputListener) {
        val header: String = MiscellaneousSamplesApplication.instance!!.getString(R.string.str_running_sample_header, title)
        outputListener.println("""
    $header
    
    """.trimIndent())
    }

    protected fun printFooter(outputListener: OutputListener) {
        val footer: String = MiscellaneousSamplesApplication.instance!!.getString(R.string.str_running_sample_footer)
        outputListener.println("""
    
    $footer
    """.trimIndent())
        outputListener.println("--------------------")
    }

    protected fun EnableRun() {
        isEnabled = true
    }

    protected fun DisableRun() {
        isEnabled = false
    }

    /**
     * This will be used by ArrayAdapter when creating the list of PDFNetSamples.
     */
    override fun toString(): String {
        return title
    }

    companion object {
        /*
     * Path in assets folder where the input files are stored.
     */
        public const val INPUT_PATH = "TestFiles/"
        public const val OFFICE_FOLDER_NAME = "DocxFiles"
    }

    init {
        mFileList = CopyOnWriteArrayList<String>()
        isEnabled = true
    }
}